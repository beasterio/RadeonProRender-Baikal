#version 450
#extension GL_AMD_gpu_shader_half_float : require

#define INVALID_ADDR 0xffffffffu
#define INTERNAL_NODE(node)((node).addr0!=INVALID_ADDR)
#define GROUP_SIZE 64
#define STACK_SIZE 32
#define LDS_STACK_SIZE 16

struct Ray {
  vec3 direction;
  float time;
  vec3 origin;
  float max_t;
};

struct Hit {
    uint shape_id;
    uint prim_id;
    vec2 uv;
};

struct BVHNode {
  uvec3 aabb01_min_or_v0;
  uint addr0;

  uvec3 aabb01_max_or_v1;
  uint addr1_or_mesh_id;

  uvec3 aabb23_min_or_v2;
  uint addr2_or_prim_id;

  uvec3 aabb23_max;
  uint addr3;
 };

layout(set = 0, binding = 0) buffer Rays {
  Ray rays[];
};

layout(set = 0, binding = 1) buffer Hits {
  Hit hits[];
};

layout(set = 0, binding = 2) buffer BVH {
  BVHNode bvh[];
};

layout(set = 0, binding = 3) buffer Stack {
  uint stack[];
};

layout (push_constant) uniform PushConstants {
  uint N;
};

layout (local_size_x = GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

shared uint lds_stack[GROUP_SIZE * LDS_STACK_SIZE];


float mymin3(float a, float b, float c) {
  return min(c, min(a,b));
}

float mymax3(float a, float b, float c) {
  return max(c, max(a,b));
}

f16vec2 mymin3(f16vec2 a, f16vec2 b, f16vec2 c) {
  return min(c, min(a,b));
}

f16vec2 mymax3(f16vec2 a, f16vec2 b, f16vec2 c) {
  return max(c, max(a,b));
}

float fast_intersect_triangle(Ray r, vec3 v1, vec3 v2, vec3 v3, float t_max) {
    vec3 e1 = v2 - v1;
    vec3 e2 = v3 - v1;
    vec3 s1 = cross(r.direction, e2);
    float invd = 1.0 / dot(s1, e1);
    vec3 d = r.origin - v1;
    float b1 = dot(d, s1) * invd;
    vec3 s2 = cross(d, e1);
    float b2 = dot(r.direction, s2) * invd;
    float temp = dot(e2, s2) * invd;

    if (b1 < 0.0 || b1 > 1.0 || 
      b2 < 0.0 || b1 + b2 > 1.0 || 
      temp < 0.0 || temp > t_max) {
        return t_max;
    } else {
        return temp;
    }
}

f16vec4 fast_intersect_aabb2(uvec3 pmin, uvec3 pmax, f16vec3 invdir, f16vec3 oxinvdir, float t_max) {
    f16vec2 pmin_x = unpackFloat2x16(pmin.x);
    f16vec2 pmin_y = unpackFloat2x16(pmin.y);
    f16vec2 pmin_z = unpackFloat2x16(pmin.z);
    f16vec2 pmax_x = unpackFloat2x16(pmax.x);
    f16vec2 pmax_y = unpackFloat2x16(pmax.y);
    f16vec2 pmax_z = unpackFloat2x16(pmax.z);

    f16vec2 f_x = fma(pmax_x, invdir.xx, oxinvdir.xx);
    f16vec2 f_y = fma(pmax_y, invdir.yy, oxinvdir.yy);
    f16vec2 f_z = fma(pmax_z, invdir.zz, oxinvdir.zz);

    f16vec2 n_x = fma(pmin_x, invdir.xx, oxinvdir.xx);
    f16vec2 n_y = fma(pmin_y, invdir.yy, oxinvdir.yy);
    f16vec2 n_z = fma(pmin_z, invdir.zz, oxinvdir.zz);

    f16vec2 t_max_x = max(f_x, n_x);
    f16vec2 t_max_y = max(f_y, n_y);
    f16vec2 t_max_z = max(f_z, n_z);

    f16vec2 t_min_x = min(f_x, n_x);
    f16vec2 t_min_y = min(f_y, n_y);
    f16vec2 t_min_z = min(f_z, n_z);

    f16vec2 t_max2 = f16vec2(t_max, t_max);
    f16vec2 t_zero = f16vec2(0.0, 0.0);
    f16vec2 t1 = min(mymin3(t_max_x, t_max_y, t_max_z), t_max2);
    f16vec2 t0 = max(mymax3(t_min_x, t_min_y, t_min_z), t_zero);
    return f16vec4(t0, t1);
}

vec2 fast_intersect_aabb(
   vec3 pmin, vec3 pmax,
   vec3 invdir, vec3 oxinvdir,
   float t_max) {
    vec3 f = fma(pmax, invdir, oxinvdir);
    vec3 n = fma(pmin, invdir, oxinvdir);
    vec3 tmax = max(f, n);
    vec3 tmin = min(f, n);
    float t1 = min(mymin3(tmax.x, tmax.y, tmax.z), t_max);
    float t0 = max(mymax3(tmin.x, tmin.y, tmin.z), 0.0);
    return vec2(t0, t1);
}

float copysign (float a, float b) {
   return sign(b) >= 0.f ? a : -a;
}

f16vec3 safe_invdir(vec3 d) {
    float dirx = d.x;
    float diry = d.y;
    float dirz = d.z;
    float ooeps = 1e-5;
    vec3 invdir;
    invdir.x = 1.0 / (abs(dirx) > ooeps ? dirx : copysign(ooeps, dirx));
    invdir.y = 1.0 / (abs(diry) > ooeps ? diry : copysign(ooeps, diry));
    invdir.z = 1.0 / (abs(dirz) > ooeps ? dirz : copysign(ooeps, dirz));
    return f16vec3(invdir);
}

vec2 calculate_barycentrics(vec3 p, vec3 v1, vec3 v2, vec3 v3) {
    vec3 e1 = v2 - v1;
    vec3 e2 = v3 - v1;
    vec3 e = p - v1;
    float d00 = dot(e1, e1);
    float d01 = dot(e1, e2);
    float d11 = dot(e2, e2);
    float d20 = dot(e, e1);
    float d21 = dot(e, e2);
    float invdenom = 1.0 / (d00 * d11 - d01 * d01);
    float b1 = (d11 * d20 - d01 * d21) * invdenom;
    float b2 = (d00 * d21 - d01 * d20) * invdenom;
    return vec2(b1, b2);
}

void stack_push(inout uint lds_sptr, uint lds_stack_bottom, inout uint sptr, uint idx) {
    if (lds_sptr - lds_stack_bottom >= LDS_STACK_SIZE) {
        for (int i = 1; i < LDS_STACK_SIZE; ++i) {
            stack[sptr + i] = lds_stack[lds_stack_bottom + i];
        }

        sptr += LDS_STACK_SIZE;
        lds_sptr = lds_stack_bottom + 1;
    }

    lds_stack[lds_sptr++] = idx;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    uint local_index = gl_LocalInvocationID.x;

    if (index >= N) return;

    Ray myRay = rays[index];
    f16vec3 invDir = safe_invdir(myRay.direction);
    f16vec3 oxInvDir = f16vec3(-myRay.origin * invDir);

    float closest_t = myRay.max_t;
    uint closest_addr = INVALID_ADDR;

    uint stack_bottom = STACK_SIZE * index; 
    uint sptr = stack_bottom;
    uint lds_stack_bottom = local_index * LDS_STACK_SIZE;
    uint lds_sptr = lds_stack_bottom;

    lds_stack[lds_sptr++] = INVALID_ADDR;
    uint addr = 0;

    while (addr != INVALID_ADDR) {
        BVHNode node = bvh[addr];

        if (INTERNAL_NODE(node)) {
            f16vec4 s01 = fast_intersect_aabb2(
                node.aabb01_min_or_v0,
                node.aabb01_max_or_v1,
                invDir, oxInvDir, closest_t);
            f16vec4 s23 = fast_intersect_aabb2(
                node.aabb23_min_or_v2,
                node.aabb23_max,
                invDir, oxInvDir, closest_t);


            bool traverse_c0 = (s01.x <= s01.z);
            bool traverse_c1 = (node.addr1_or_mesh_id != INVALID_ADDR) && (s01.y <= s01.w);
            bool traverse_c2 = (s23.x <= s23.z);
            bool traverse_c3 = (node.addr3 != INVALID_ADDR) && (s23.y <= s23.w);

            if (traverse_c0 || traverse_c1 || traverse_c2 || traverse_c3) {

                /*uint child_nodes[4];
                child_nodes[0] = traverse_c0 ? node.addr0 : INVALID_ADDR;
                child_nodes[1] = traverse_c1 ? node.addr1_or_mesh_id : INVALID_ADDR;
                child_nodes[2] = traverse_c2 ? node.addr2_or_prim_id : INVALID_ADDR;
                child_nodes[3] = traverse_c3 ? node.addr3 : INVALID_ADDR;

                float dist[4];
                dist[0] = traverse_c0 ? s01.x : 1000000.f;
                dist[1] = traverse_c1 ? s01.y : 1000000.f;
                dist[2] = traverse_c2 ? s23.x : 1000000.f;
                dist[3] = traverse_c3 ? s23.y : 1000000.f;

                for (int i = 1; i < 4; ++i) {
                    float d = dist[i];
                    uint n = child_nodes[i];
                    int j = i - 1;
                    for (; j >= 0 && dist[j] > d; --j ){
                        dist[j + 1] = dist[j];
                        child_nodes[j + 1] = child_nodes[j];
                    }
                    dist[j + 1] = d;
                    child_nodes[j + 1] = n;
                }

                addr = child_nodes[0];

                for (int i = 1; i < 4; ++i) {
                    if (child_nodes[i] != INVALID_ADDR) {
                        stack_push(lds_sptr, lds_stack_bottom, sptr, child_nodes[i]);
                    }
                }

                continue;*/
                uint a = INVALID_ADDR;
                float d = 100000000.f;
                if (traverse_c0)
                {
                    a = node.addr0;
                    d = s01.x;
                    //stack_push(lds_sptr, lds_stack_bottom, sptr, node.addr0);
                }

                if (traverse_c1)
                {
                    if (a == INVALID_ADDR) a = node.addr1_or_mesh_id;
                    else {
                        uint topush = s01.y < d ? a : node.addr1_or_mesh_id;
                        d = min(s01.y, d);
                        a = topush == a ? node.addr1_or_mesh_id : a;
                        stack_push(lds_sptr, lds_stack_bottom, sptr, topush);
                    }
                }

                if (traverse_c2)
                {
                    if (a == INVALID_ADDR) a = node.addr2_or_prim_id;
                    else {
                        uint topush = s23.x < d ? a : node.addr2_or_prim_id;
                        d = min(s23.x, d);
                        a = topush == a ? node.addr2_or_prim_id : a;
                        stack_push(lds_sptr, lds_stack_bottom, sptr, topush);
                    }
                }

                if (traverse_c3)
                {
                    if (a == INVALID_ADDR) a = node.addr3;
                    else {
                        uint topush = s23.y < d ? a : node.addr3;
                        d = min(s23.y, d);
                        a = topush == a ? node.addr3 : a;
                        stack_push(lds_sptr, lds_stack_bottom, sptr, topush);
                    }
                }

                addr = a;
                continue;
            }
        } else {
            float t = fast_intersect_triangle(
                myRay,
                uintBitsToFloat(node.aabb01_min_or_v0),
                uintBitsToFloat(node.aabb01_max_or_v1),
                uintBitsToFloat(node.aabb23_min_or_v2),
                closest_t);

            if (t < closest_t) {
                closest_t = t;
                closest_addr = addr;
            }
        }

        addr = lds_stack[--lds_sptr];

        if (addr == INVALID_ADDR && sptr > stack_bottom) {
            sptr -= LDS_STACK_SIZE;
            for (int i = 1; i < LDS_STACK_SIZE; ++i) {
                lds_stack[lds_stack_bottom + i] = stack[sptr + i];
            }

            lds_sptr = lds_stack_bottom + LDS_STACK_SIZE - 1;
            addr = lds_stack[lds_sptr];
        }
    }

    if (closest_addr != INVALID_ADDR) {
        BVHNode node = bvh[closest_addr];
        vec3 p = myRay.origin + closest_t * myRay.direction;

        Hit hit;
        hit.uv = calculate_barycentrics(
            p, 
            uintBitsToFloat(node.aabb01_min_or_v0),
            uintBitsToFloat(node.aabb01_max_or_v1),
            uintBitsToFloat(node.aabb23_min_or_v2)
        );

        hit.prim_id = node.addr2_or_prim_id;
        hit.shape_id = node.addr1_or_mesh_id;
        hits[index] = hit;
    } else {
        hits[index].shape_id = INVALID_ADDR;
    }
}