#version 450
#define GROUP_SIZE 64

struct Ray {
  vec3 direction;
  float time;
  vec3 origin;
  float max_t;
};

layout (local_size_x = GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
layout(std140, binding = 0) buffer Rays 
{
  Ray rays[];
};

layout (binding = 1) uniform UBO 
{
  mat4 projection;
  mat4 view;
  vec4 params; // x, y - width, height, w - tan(fov/2)
  vec4 camera_position;
} ubo;

void main() 
{
    const uint index = gl_GlobalInvocationID.x;

    const uint width  = uint(ubo.params.x);
    const uint height = uint(ubo.params.y);
    const float fov   = ubo.params.w;

    const uint x = index % width;
    const uint y = index / width;

    const float aspectRatio = float(width) / float(height);

    vec2 img_plane = 2.f * vec2(float(x) / float(width) - 0.5f, float(y) / float(height) - 0.5f) * fov;
    img_plane.x *= aspectRatio;

    vec4 ray_dir = vec4(img_plane.x, img_plane.y, -1.0f, 0.0f);
    ray_dir = ray_dir * ubo.view;

    rays[index].origin = ubo.camera_position.xyz * vec3(-1,1,-1);
    rays[index].direction = ray_dir.xyz;
    rays[index].max_t = 1000000.f;
}